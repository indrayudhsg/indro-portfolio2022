// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xgndtx1wAp1Kt3H67Xxeiq
// Component: z5EDbolSaWhr
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: lbT57O6QquH/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: xgndtx1wAp1Kt3H67Xxeiq/projectcss
import sty from "./PlasmicIndex.module.css"; // plasmic-import: z5EDbolSaWhr/css

export const PlasmicIndex__VariantProps = new Array();

export const PlasmicIndex__ArgProps = new Array();

function PlasmicIndex__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"Indrayudh's Portfolio"}</title>

        <meta
          key="og:title"
          property="og:title"
          content={"Indrayudh's Portfolio"}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Indrayudh's Portfolio"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__adwsA)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__ricju)}>
                <Navbar
                  data-plasmic-name={"navbar"}
                  data-plasmic-override={overrides.navbar}
                />
              </div>
            ) : null}

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9T5R3)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Hi! I'm Indrayudh"}
                </h1>

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "In a world plagued with class conflict and an ever-growing climate crisis, I hope to integrate design practices into meaningful projects which could aid in creating positive change in existing social structures."
                  }
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navbar", "h1", "text"],
  navbar: ["navbar"],
  h1: ["h1"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIndex__ArgProps,
          internalVariantPropNames: PlasmicIndex__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicIndex__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIndex";
  } else {
    func.displayName = `PlasmicIndex.${nodeName}`;
  }
  return func;
}

export const PlasmicIndex = Object.assign(
  // Top-level PlasmicIndex renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicIndex
    internalVariantProps: PlasmicIndex__VariantProps,
    internalArgProps: PlasmicIndex__ArgProps
  }
);

export default PlasmicIndex;
/* prettier-ignore-end */
